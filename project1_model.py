# -*- coding: utf-8 -*-
"""Copy of resnet18 (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yMO1_sgvPFsvJfzMghBKCGOQXMLjton5
"""

# Commented out IPython magic to ensure Python compatibility.
import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision
import torchvision.transforms as transforms
import torch.optim as optim
import matplotlib.pyplot as plt
# %matplotlib inline
import torchsummary

class BasicBlock(nn.Module):

    def __init__(self, in_planes, planes, stride=1):
        super(BasicBlock, self).__init__()
        self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)
        self.bn1 = nn.BatchNorm2d(planes)
        self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)
        self.bn2 = nn.BatchNorm2d(planes)

        self.shortcut = nn.Sequential()
        if stride != 1 or in_planes != planes:
            self.shortcut = nn.Sequential(
                nn.Conv2d(in_planes, planes, kernel_size=1, stride=stride, bias=False),
                nn.BatchNorm2d(planes)
            )

    def forward(self, x):
        out = F.relu(self.bn1(self.conv1(x)))
        out = self.bn2(self.conv2(out))
        out += self.shortcut(x)
        out = F.relu(out)
        return out

class ResNet(nn.Module):
    def __init__(self, block, num_blocks, num_classes=10):
        super(ResNet, self).__init__()
        self.in_planes = 64

        self.conv1 = nn.Conv2d(3, 64, kernel_size=3, stride=1, padding=1, bias=False)
        self.bn1 = nn.BatchNorm2d(64)
        self.layer1 = self._make_layer(block, 64, num_blocks[0], stride=1)
        self.layer2 = self._make_layer(block, 128, num_blocks[1], stride=2)
        self.layer3 = self._make_layer(block, 256, num_blocks[2], stride=2)
        self.layer4 = self._make_layer(block, 512, num_blocks[3], stride=2)  #+++++++++++++++
        self.linear = nn.Linear(512, num_classes) #++++++++

    def _make_layer(self, block, planes, num_blocks, stride):
        strides = [stride] + [1]*(num_blocks-1) #str + str
        layers = []
        for stride in strides:
            layers.append(block(self.in_planes, planes, stride))
            self.in_planes = planes
        print(layers)
        return nn.Sequential(*layers)

    def forward(self, x):
        out = F.relu(self.bn1(self.conv1(x)))
        out = self.layer1(out)
        out = self.layer2(out)
        out = self.layer3(out)
        out = self.layer4(out)
        out = F.avg_pool2d(out, 4)
        out = out.view(out.size(0), -1)
        out = self.linear(out)
        return out

def project1_model():
    return ResNet(BasicBlock, [1, 1, 1, 1]) #+++++++++++++

# Data Pretreatment
transform_train = transforms.Compose([
    transforms.RandomCrop(32, padding=4),  # fill the margin as 0ï¼Œthen cut the image in 32*32 randomly
    transforms.RandomHorizontalFlip(),  # rotate with 50% probability
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)), # randomly normalize
])

transform_test = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)), # same as training set
])

trainset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform_train)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=128, shuffle=True, num_workers=8)   

testset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform_test)
testloader = torch.utils.data.DataLoader(testset, batch_size=128, shuffle=False, num_workers=8)

#load the model
model = project1_model()

#select gpu 0, if available
# otherwise fallback to cpu
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

#transfer the model to the GPU
model = model.to(device)

#loss function
loss_function = nn.CrossEntropyLoss()

#optimizer all parameters
optimizer = optim.Adam(model.parameters())

torchsummary.summary(model,(3,32,32))

def train(model, train_loader, optimizer, epoch):
    model.train()
    sum_loss = 0.0
    correct = 0.0
    total = 0.0
    for batch_idx, (data, target) in enumerate(train_loader):
        data, target = data.to(device), target.to(device)
        optimizer.zero_grad()
        output = model(data)
        loss = F.cross_entropy(output, target)
        loss.backward()
        optimizer.step()



        sum_loss += loss.item()
        _, predicted = torch.max(output.data, 1)
        total += target.size(0)
        correct += predicted.eq(target.data).cpu().sum()

        train_loss=sum_loss / (batch_idx + 1)
        # train_acc=100. * correct / total
        train_acc=100. * correct / len(train_loader.dataset)

        
        if batch_idx % 100 == 0:
            print("Train Epoch: {} [{}/{} ({:.0f}%)]\tLoss: {:.6f}".format(
                epoch, 
                batch_idx * len(data), 
                len(train_loader.dataset), 
                100. * batch_idx / len(train_loader), 
                loss.item()))
    return train_loss, train_acc

def evaluate(model, test_loader):
    model.eval()
    test_loss = 0
    correct = 0
    with torch.no_grad():
        for data, target in test_loader:
            data, target = data.to(device), target.to(device)
            output = model(data)
            test_loss += F.cross_entropy(output, target, reduction = "sum").item()
            prediction = output.max(1, keepdim = True)[1]
            correct += prediction.eq(target.view_as(prediction)).sum().item()
    
    test_loss /= len(test_loader.dataset)
    test_accuracy = 100. * correct / len(test_loader.dataset)
    return test_loss, test_accuracy

train_loss_history = []##+++++
train_accuracy_history = []##++++
test_loss_history = []
test_accuracy_history = []

EPOCHS = 50
for epoch in range(1, EPOCHS + 1):
    train_loss, train_accuracy = train(model, trainloader, optimizer, epoch)#+++
    test_loss, test_accuracy = evaluate(model, testloader)
    train_loss_history.append(train_loss)#++
    test_loss_history.append(test_loss)
    train_accuracy_history.append(train_accuracy)#++
    test_accuracy_history.append(test_accuracy)
    print("[{}] Train Loss: {:.4f}, accuracy: {:.2f}%\n".format(epoch, train_loss, train_accuracy))#++
    print("[{}] Test Loss: {:.4f}, accuracy: {:.2f}%\n".format(epoch, test_loss, test_accuracy))

print(train_loss,train_accuracy)

print(test_loss,test_accuracy)

plt.plot(range(50),train_loss_history,'-',linewidth=3,label='train loss')
# plt.plot(range(2),test_accuracy_history,'-',linewidth=3,label='Test acc')
plt.xlabel('epoch')
plt.ylabel('loss')
plt.grid(True)
plt.legend()

plt.plot(range(50),test_loss_history,'-',linewidth=3,label='test loss')
# plt.plot(range(2),test_accuracy_history,'-',linewidth=3,label='Test acc')
plt.xlabel('epoch')
plt.ylabel('loss')
plt.grid(True)
plt.legend()

plt.plot(range(50),train_accuracy_history,'-',linewidth=3,label='Train acc')
plt.xlabel('epoch')
plt.ylabel('loss')
plt.grid(True)
plt.legend()

# plt.plot(range(2),test_loss_history,'-',linewidth=3,label='test loss')
plt.plot(range(50),test_accuracy_history,'-',linewidth=3,label='Test acc')
plt.xlabel('epoch')
plt.ylabel('loss')
plt.grid(True)
plt.legend()

def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)
    # torch.numel() returns number of elements in a tensor

print(count_parameters(model))

print(model)

model_path = './project1_model.pt'
torch.save(model.state_dict(), model_path)

